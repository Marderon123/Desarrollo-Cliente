{"version":3,"sources":["components/choosePlayer.js","components/Status.js","App.js","serviceWorker.js","index.js"],"names":["Player","e","preventDefault","this","props","player","target","value","onSubmit","handleForm","className","type","name","Component","Status","setPlayer","winner","handleSetPlayer","renderHtml","App","state","tablero","Array","fill","checkMatch","winLines","index","length","a","b","c","alert","setState","newTablero","checkWinner","map","box","key","onClick","hacerClick","reset","renderBoxes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ba160e4.chunk.js","sourcesContent":["import React, {Component } from \"react\";\r\n\r\nclass Player extends Component{\r\n    handleForm(e){\r\n        e.preventDefault(); //preventdefault sirve para que al hacer click en el boton Start no haga nada si no esta seleccionado el jugador\r\n        this.props.player(e.target.player.value)\r\n        //Coge el valor del input radio del formulario y selecciona el jugador dependiendo de su valor //X//O//\r\n    }\r\n    \r\n    //Forumlario para escoger que jugador comienza la partida\r\n    render(){\r\n        return (\r\n            <form onSubmit={(e) => this.handleForm(e)} className=\"formulario\">\r\n                <label>\r\n                    Player X\r\n                    <input type=\"radio\" name=\"player\" value =\"X\"/> \r\n                </label>\r\n                <label>\r\n                    Player O\r\n                    <input type=\"radio\" name=\"player\" value =\"O\"/> \r\n                </label>\r\n                <p></p>\r\n                <input type=\"submit\" value=\"START\" className=\"button\"/>\r\n            </form>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Player;","import React, { Component } from 'react';\r\nimport Player from './choosePlayer';\r\n\r\nclass Status extends Component {\r\n    //Se encarga de la funcion del jugador \r\n    handleSetPlayer(e) {\r\n        this.props.setPlayer(e)\r\n    }\r\n\r\n\r\n    //funcion para sacar el HTML, si hay ganado sacara la frase de quien ha ganado, si no saca cual es el siguiente jugador\r\n    renderHtml() {\r\n        if (this.props.winner) {\r\n            return (<h2>Winner is {this.props.winner}</h2>)\r\n        } else {\r\n            return this.props.player ?\r\n                <h2>Next player is {this.props.player}</h2> :\r\n                <Player player={(e) => this.handleSetPlayer(e)}/>\r\n        }\r\n    }\r\n    render() {\r\n        return (<span>{this.renderHtml()}</span>)\r\n        //saca en un span la llamada de la funcion renderHtml()\r\n    }\r\n}\r\n\r\nexport default Status;","import React, { Component } from 'react';\nimport './App.css';\nimport Status from './components/Status';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tablero: Array(9).fill(null),\n            player: null,\n            winner: null\n        }\n    }\n\n    //Chequear el ganador, guardamos en un array todas las posibilidades que hay de ganar en el tres en raya\n    checkWinner() {\n        let winLines = [\n            [\"0\", \"1\", \"2\"],\n            [\"3\", \"4\", \"5\"],\n            [\"6\", \"7\", \"8\"],\n            [\"0\", \"3\", \"6\"],\n            [\"1\", \"4\", \"7\"],\n            [\"2\", \"5\", \"8\"],\n            [\"0\", \"4\", \"8\"],\n            [\"2\", \"4\", \"6\"],\n        ]\n        this.checkMatch(winLines)\n    }\n\n    //funcion  para saber quien gana,\n    //Las variables iniciadas sirven para compararlas con las posiciones que ya han sido dadas en el tablero anteriormente\n    //Si coincide alguna de las combinaciones, saca un alert que indique que has ganado y seguidamente que jugador ha ganado.\n    checkMatch(winLines) {\n        for (let index = 0; index < winLines.length; index++) {\n            const [a, b, c] = winLines[index];\n            let tablero = this.state.tablero\n\n            if (tablero[a] && tablero[a] === tablero[b]\n                && tablero[a] === tablero[c]) {\n                    alert(\"YOU WIN\");\n                this.setState({\n                    winner: this.state.player\n                })\n            }\n        }\n    }\n\n    //Funcion que al hacer click nos muestre la X o la 0 dependiendo del jugador que toque\n    hacerClick(index) {\n        if (this.state.player && !this.state.winner) {\n            let newTablero = this.state.tablero\n\n            if (this.state.tablero[index] === null) {\n                newTablero[index] = this.state.player\n\n                this.setState({\n                    tablero: newTablero,\n                    player: this.state.player === \"X\" ? \"O\" : \"X\" \n                })\n                this.checkWinner()\n            }\n\n        }\n\n    }\n    setPlayer(player) {\n        this.setState({ player })\n    }\n\n    renderBoxes() {\n        return this.state.tablero.map(\n            (box, index) =>\n                <div className=\"box\" key={index}\n                    onClick={() => this.hacerClick(index)}>\n                    {box}\n                </div>\n        )\n    }\n\n    reset() {\n        this.setState({\n            player: null,\n            winner: null,\n            tablero: Array(9).fill(null)\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h1> Tic Tac Toe </h1>\n                <button   onClick={() => this.reset()} className=\"button\">RESET</button>\n                <Status\n                    player={this.state.player}\n                    setPlayer={(e) => { this.setPlayer(e) }}\n                    winner={this.state.winner}\n                />\n                <div className=\"tablero\">\n                    {this.renderBoxes()}\n                </div>\n                \n            </div >\n            /**disabled={!this.state.winner}  */\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}